{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\omkar\\\\vibe-commerce\\\\client\\\\src\\\\contexts\\\\CartContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext();\n\n// Cart reducer for state management\nconst cartReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload,\n        loading: false\n      };\n    case 'SET_CART':\n      return {\n        ...state,\n        cart: action.payload,\n        loading: false,\n        error: null\n      };\n    case 'CLEAR_ERROR':\n      return {\n        ...state,\n        error: null\n      };\n    default:\n      return state;\n  }\n};\n\n// Initial state\nconst initialState = {\n  cart: {\n    items: [],\n    total: 0\n  },\n  loading: false,\n  error: null\n};\n\n// Cart provider component\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(cartReducer, initialState);\n\n  // Fetch cart from API\n  const fetchCart = async () => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      const response = await axios.get('/api/cart');\n      dispatch({\n        type: 'SET_CART',\n        payload: response.data\n      });\n    } catch (error) {\n      var _error$response, _error$response$data;\n      dispatch({\n        type: 'SET_ERROR',\n        payload: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Failed to fetch cart'\n      });\n    }\n  };\n\n  // Add item to cart\n  const addToCart = async (product, qty = 1) => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      const response = await axios.post('/api/cart', {\n        productId: product._id || product.id,\n        qty\n      });\n      dispatch({\n        type: 'SET_CART',\n        payload: response.data\n      });\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      dispatch({\n        type: 'SET_ERROR',\n        payload: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Failed to add item to cart'\n      });\n    }\n  };\n\n  // Update item quantity\n  const updateQty = async (cartItemId, qty) => {\n    if (qty <= 0) {\n      removeFromCart(cartItemId);\n      return;\n    }\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      // For simplicity, we'll remove and re-add the item with new quantity\n      // In a real app, you'd have a PUT endpoint for updating quantity\n      const response = await axios.get('/api/cart');\n      const updatedItems = response.data.items.map(item => item._id === cartItemId || item.id === cartItemId ? {\n        ...item,\n        qty\n      } : item);\n\n      // Calculate total\n      const total = updatedItems.reduce((sum, item) => sum + item.price * item.qty, 0);\n      dispatch({\n        type: 'SET_CART',\n        payload: {\n          items: updatedItems,\n          total\n        }\n      });\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      dispatch({\n        type: 'SET_ERROR',\n        payload: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || 'Failed to update quantity'\n      });\n    }\n  };\n\n  // Remove item from cart\n  const removeFromCart = async cartItemId => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      const response = await axios.delete(`/api/cart/${cartItemId}`);\n      dispatch({\n        type: 'SET_CART',\n        payload: response.data\n      });\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      dispatch({\n        type: 'SET_ERROR',\n        payload: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || 'Failed to remove item from cart'\n      });\n    }\n  };\n\n  // Clear error\n  const clearError = () => {\n    dispatch({\n      type: 'CLEAR_ERROR'\n    });\n  };\n\n  // Get cart item count\n  const getCartItemCount = () => {\n    return state.cart.items.reduce((total, item) => total + item.qty, 0);\n  };\n\n  // Check if cart is empty\n  const isCartEmpty = () => {\n    return state.cart.items.length === 0;\n  };\n\n  // Fetch cart on component mount\n  useEffect(() => {\n    fetchCart();\n  }, []);\n  const value = {\n    cart: state.cart,\n    loading: state.loading,\n    error: state.error,\n    addToCart,\n    updateQty,\n    removeFromCart,\n    fetchCart,\n    clearError,\n    getCartItemCount,\n    isCartEmpty\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use cart context\n_s(CartProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = CartProvider;\nexport const useCart = () => {\n  _s2();\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n};\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","axios","jsxDEV","_jsxDEV","CartContext","cartReducer","state","action","type","loading","payload","error","cart","initialState","items","total","CartProvider","children","_s","dispatch","fetchCart","response","get","data","_error$response","_error$response$data","addToCart","product","qty","post","productId","_id","id","_error$response2","_error$response2$data","updateQty","cartItemId","removeFromCart","updatedItems","map","item","reduce","sum","price","_error$response3","_error$response3$data","delete","_error$response4","_error$response4$data","clearError","getCartItemCount","isCartEmpty","length","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/omkar/vibe-commerce/client/src/contexts/CartContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst CartContext = createContext();\r\n\r\n// Cart reducer for state management\r\nconst cartReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'SET_LOADING':\r\n      return { ...state, loading: action.payload };\r\n    case 'SET_ERROR':\r\n      return { ...state, error: action.payload, loading: false };\r\n    case 'SET_CART':\r\n      return { ...state, cart: action.payload, loading: false, error: null };\r\n    case 'CLEAR_ERROR':\r\n      return { ...state, error: null };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Initial state\r\nconst initialState = {\r\n  cart: { items: [], total: 0 },\r\n  loading: false,\r\n  error: null\r\n};\r\n\r\n// Cart provider component\r\nexport const CartProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(cartReducer, initialState);\r\n\r\n  // Fetch cart from API\r\n  const fetchCart = async () => {\r\n    try {\r\n      dispatch({ type: 'SET_LOADING', payload: true });\r\n      const response = await axios.get('/api/cart');\r\n      dispatch({ type: 'SET_CART', payload: response.data });\r\n    } catch (error) {\r\n      dispatch({ \r\n        type: 'SET_ERROR', \r\n        payload: error.response?.data?.error || 'Failed to fetch cart' \r\n      });\r\n    }\r\n  };\r\n\r\n  // Add item to cart\r\n  const addToCart = async (product, qty = 1) => {\r\n    try {\r\n      dispatch({ type: 'SET_LOADING', payload: true });\r\n      const response = await axios.post('/api/cart', {\r\n        productId: product._id || product.id,\r\n        qty\r\n      });\r\n      dispatch({ type: 'SET_CART', payload: response.data });\r\n    } catch (error) {\r\n      dispatch({ \r\n        type: 'SET_ERROR', \r\n        payload: error.response?.data?.error || 'Failed to add item to cart' \r\n      });\r\n    }\r\n  };\r\n\r\n  // Update item quantity\r\n  const updateQty = async (cartItemId, qty) => {\r\n    if (qty <= 0) {\r\n      removeFromCart(cartItemId);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      dispatch({ type: 'SET_LOADING', payload: true });\r\n      // For simplicity, we'll remove and re-add the item with new quantity\r\n      // In a real app, you'd have a PUT endpoint for updating quantity\r\n      const response = await axios.get('/api/cart');\r\n      const updatedItems = response.data.items.map(item => \r\n        item._id === cartItemId || item.id === cartItemId \r\n          ? { ...item, qty }\r\n          : item\r\n      );\r\n      \r\n      // Calculate total\r\n      const total = updatedItems.reduce((sum, item) => sum + (item.price * item.qty), 0);\r\n      \r\n      dispatch({ \r\n        type: 'SET_CART', \r\n        payload: { items: updatedItems, total } \r\n      });\r\n    } catch (error) {\r\n      dispatch({ \r\n        type: 'SET_ERROR', \r\n        payload: error.response?.data?.error || 'Failed to update quantity' \r\n      });\r\n    }\r\n  };\r\n\r\n  // Remove item from cart\r\n  const removeFromCart = async (cartItemId) => {\r\n    try {\r\n      dispatch({ type: 'SET_LOADING', payload: true });\r\n      const response = await axios.delete(`/api/cart/${cartItemId}`);\r\n      dispatch({ type: 'SET_CART', payload: response.data });\r\n    } catch (error) {\r\n      dispatch({ \r\n        type: 'SET_ERROR', \r\n        payload: error.response?.data?.error || 'Failed to remove item from cart' \r\n      });\r\n    }\r\n  };\r\n\r\n  // Clear error\r\n  const clearError = () => {\r\n    dispatch({ type: 'CLEAR_ERROR' });\r\n  };\r\n\r\n  // Get cart item count\r\n  const getCartItemCount = () => {\r\n    return state.cart.items.reduce((total, item) => total + item.qty, 0);\r\n  };\r\n\r\n  // Check if cart is empty\r\n  const isCartEmpty = () => {\r\n    return state.cart.items.length === 0;\r\n  };\r\n\r\n  // Fetch cart on component mount\r\n  useEffect(() => {\r\n    fetchCart();\r\n  }, []);\r\n\r\n  const value = {\r\n    cart: state.cart,\r\n    loading: state.loading,\r\n    error: state.error,\r\n    addToCart,\r\n    updateQty,\r\n    removeFromCart,\r\n    fetchCart,\r\n    clearError,\r\n    getCartItemCount,\r\n    isCartEmpty\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={value}>\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use cart context\r\nexport const useCart = () => {\r\n  const context = useContext(CartContext);\r\n  if (!context) {\r\n    throw new Error('useCart must be used within a CartProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}